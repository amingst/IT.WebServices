syntax = "proto3";

package IT.WebServices.Fragments.Authorization.Payment.Stripe;

import "google/api/annotations.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Payment/DataRecords.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Payment/SharedTypes.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Payment/Stripe/ProductRecord.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Payment/PaymentError.proto";

service StripeInterface {
  rpc StripeCheckOtherSubscription (StripeCheckOtherSubscriptionRequest) returns (StripeCheckOtherSubscriptionResponse) {}

  rpc StripeCheckOwnSubscription (StripeCheckOwnSubscriptionRequest) returns (StripeCheckOwnSubscriptionResponse) {}

//  rpc StripeCheckOwnOneTime (StripeCheckOwnOneTimeRequest) returns (StripeCheckOwnOneTimeResponse) {}

  rpc StripeGetAccountDetails (StripeGetAccountDetailsRequest) returns (StripeGetAccountDetailsResponse) {}

  rpc StripeNewOwnSubscription (StripeNewOwnSubscriptionRequest) returns (StripeNewOwnSubscriptionResponse)
  {
    option (google.api.http) = {
      post: "/api/payment/stripe/subscription/new"
      body: "*"
    };
  }

  rpc StripeCreateBillingPortal (StripeCreateBillingPortalRequest) returns (StripeCreateBillingPortalResponse) {}

  rpc StripeCreateCheckoutSession(StripeCheckoutSessionRequest) returns (StripeCheckoutSessionResponse) {}

  rpc StripeEnsureOneTimeProduct(StripeEnsureOneTimeProductRequest) returns (StripeEnsureOneTimeProductResponse) {}
}

message StripeBulkActionCancelRequest {
  PaymentBulkAction Action = 1;
}
  
message StripeBulkActionCancelResponse {
  repeated PaymentBulkActionProgress RunningActions = 1;
}

message StripeBulkActionStartRequest {
  PaymentBulkAction Action = 1;
}
  
message StripeBulkActionStartResponse {
  repeated PaymentBulkActionProgress RunningActions = 1;
}

message StripeBulkActionStatusRequest {
}
  
message StripeBulkActionStatusResponse {
  repeated PaymentBulkActionProgress RunningActions = 1;
}

message StripeCheckOtherSubscriptionRequest {
    string UserID = 1;
}

message StripeCheckOtherSubscriptionResponse {
	repeated GenericSubscriptionFullRecord Records = 1;
	PaymentError Error = 2;
}
 
message StripeCheckOwnSubscriptionRequest {
}

message StripeCheckOwnSubscriptionResponse {
	repeated GenericSubscriptionFullRecord Records = 1;
	PaymentError Error = 2;
}
 
//message StripeCheckOwnOneTimeRequest {
//}

//message StripeCheckOwnOneTimeResponse {
//	repeated StripeOneTimePaymentRecord Records = 1;
//	string Error = 2;
//}
 
message StripeCheckoutSessionRequest {
	string PriceID = 1;
}

message StripeCheckoutSessionResponse {
	string SessionUrl = 1;
	PaymentError Error = 2;
}
 
message StripeCreateBillingPortalRequest {
	string CustomerID = 1;
}

message StripeCreateBillingPortalResponse {
	string Url = 1;
	PaymentError Error = 2;
}

message StripeCancelOtherSubscriptionRequest {
  string UserID = 1;
  string SubscriptionID = 2;
  string Reason = 3;
}
  
message StripeCancelOtherSubscriptionResponse {
  GenericSubscriptionRecord Record = 1;
  PaymentError Error = 2;
}

message StripeCancelOwnSubscriptionRequest {
  string Reason = 1;
  string SubscriptionID = 2;
}
  
message StripeCancelOwnSubscriptionResponse {
  GenericSubscriptionRecord Record = 1;
  PaymentError Error = 2;
}

message StripeGetAccountDetailsRequest {
}
  
message StripeGetAccountDetailsResponse {
  ProductList Products = 1;
  string ClientID = 2;
}
  
message StripeGetOtherSubscriptionRecordsRequest {
  string UserID = 1;
}
  
message StripeGetOtherSubscriptionRecordsResponse {
  repeated GenericSubscriptionFullRecord Records = 1;
}

message StripeGetOwnSubscriptionRecordsRequest {
}
  
message StripeGetOwnSubscriptionRecordsResponse {
  repeated GenericSubscriptionRecord Records = 1;
}

message StripeNewOwnSubscriptionRequest {
  string SubscriptionID = 1;
  uint32 SubscriptionPrice = 2;
  string CustomerID = 3;
}
  
message StripeNewOwnSubscriptionResponse {
  GenericSubscriptionRecord Record = 1;
  PaymentError Error = 2;
}


message StripeEnsureOneTimeProductRequest {
	string InternalID = 1;
	string Name = 2;
	uint32 MinimumPrice = 11;
	uint32 MaximumPrice = 12;
}

message StripeEnsureOneTimeProductResponse {
	PaymentError Error = 1;
}

message StripeReconcileOtherSubscriptionRequest {
  string UserID = 1;
  string SubscriptionID = 2;
}
  
message StripeReconcileOtherSubscriptionResponse {
  GenericSubscriptionFullRecord Record = 1;
  PaymentError Error = 2;
}

message StripeReconcileOwnSubscriptionRequest {
  string SubscriptionID = 1;
}
  
message StripeReconcileOwnSubscriptionResponse {
  GenericSubscriptionFullRecord Record = 1;
  PaymentError Error = 2;
}
