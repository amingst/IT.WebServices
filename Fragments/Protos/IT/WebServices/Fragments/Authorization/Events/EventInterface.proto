syntax = "proto3";

package IT.WebServices.Fragments.Authorization.Events;

import "google/api/annotations.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Events/EventRecord.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Events/EventTicketRecord.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Events/EventError.proto";
import "Protos/IT/WebServices/Fragments/CommonTypes.proto";

service EventInterface {
  rpc GetEvent (GetEventRequest) returns (GetEventResponse) {
	  option (google.api.http) = {
	  get: "/api/events/{EventId}"
	  };
  }
  rpc GetEvents (GetEventsRequest) returns (GetEventsResponse) {
	  option (google.api.http) = {
	  get: "/api/events"
	  };
  }

	rpc GetOwnTicket (GetOwnTicketRequest) returns (GetOwnTicketResponse) {
		option (google.api.http) = {
			get: "/api/events/{EventId}/tickets/{TicketId}"
		};
	}

	rpc GetOwnTickets (GetOwnTicketsRequest) returns (GetOwnTicketsResponse) {
		option (google.api.http) = {
			get: "/api/events/{EventId}/tickets"
		};
	}

	rpc CancelOwnTicket (CancelOwnTicketRequest) returns (CancelOwnTicketResponse) {
		option (google.api.http) = {
			post: "/api/events/{EventId}/tickets/{TicketId}/cancel",
			body: "*"
		};
	}
	rpc ReserveTicketForEvent (ReserveTicketForEventRequest) returns (ReserveTicketForEventResponse) {
		option (google.api.http) = {
			post: "/api/events/{EventId}/tickets/reserve",
			body: "*"
		};
	}

	rpc UseTicket(UseTicketRequest) returns (UseTicketResponse) {
		option (google.api.http) = {
			post: "/api/events/tickets/use",
			body: "*"
		};
	}
}

message GetEventRequest {
	string EventId = 1; // ID of the event to retrieve
}

message GetEventResponse {
	EventError Error = 1; // Error information if retrieval failed
	EventPublicRecord Event = 2; // The event record if successful
}

message GetEventsRequest {
	string RecurrenceHash = 1; // Optional hash to filter by recurring events
	bool IncludeCanceled = 2; // Whether to include canceled events in the response
}

message GetEventsResponse {
	EventError Error = 1; // Error information if retrieval failed
	repeated EventPublicRecord Events = 2; // List of events retrieved
	Pagination Pagination = 3; // Pagination information for the list of events
}

message GetOwnTicketRequest {
	string TicketId = 1;
	string EventId = 2; // ID of the event to which the ticket belongs
}

message GetOwnTicketResponse {
	EventTicketPublicRecord Record = 1;
	EventError Error = 2;
}

message GetOwnTicketsRequest {
	string EventId = 1;
	bool IncludeCanceled = 2; // Optional: Include canceled tickets
	bool IncludeUsed = 3; // Optional: Include used tickets
	bool IncludeExpired = 4; // Optional: Include expired tickets
}

message GetOwnTicketsResponse {
	repeated EventTicketPublicRecord Records = 1;
	EventError Error = 2;
}

message CancelOwnTicketRequest {
	string EventId = 1;
	string TicketId = 2;
	string Reason = 3;
}

message CancelOwnTicketResponse {
	EventError Error = 1;
}

message ReserveTicketForEventRequest {
	string EventId = 1; // ID of the event for which to reserve a ticket
	string TicketClassId = 2; // ID of the ticket class to reserve
	uint32 Quantity = 3; // Number of tickets to reserve
}

message ReserveTicketForEventResponse {
	EventError Error = 1; // Error information if reservation failed
	repeated EventTicketRecord Tickets = 2; // The reserved ticket record if successful
}

message UseTicketRequest {
	string TicketId = 1; // ID of the ticket to use
}

message UseTicketResponse {
	EventError Error = 1; // Error information if using the ticket failed
}