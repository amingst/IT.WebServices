syntax = "proto3";

package IT.WebServices.Fragments.Authorization.Events;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Events/EventRecord.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Events/EventTicketRecord.proto";
import "Protos/IT/WebServices/Fragments/CommonTypes.proto";

service EventInterface {
  rpc AdminCreateEvent (AdminCreateEventRequest) returns (AdminCreateEventResponse) {
	option (google.api.http) = {
	  post: "/api/admin/events/create",
	  body: "*"
	};
  }
  rpc AdminCreateRecurringEvent (AdminCreateRecurringEventRequest) returns (AdminCreateEventResponse) {
	option (google.api.http) = {
	  post: "/api/admin/events/create-recurring",
	  body: "*"
	};
  }
  rpc AdminGetEvent (AdminGetEventRequest) returns (AdminGetEventResponse) {
	option (google.api.http) = {
	  get: "/api/admin/events/{EventId}"
	};
  }
  rpc AdminGetEvents (AdminGetEventsRequest) returns (AdminGetEventsResponse) {
	option (google.api.http) = {
	  get: "/api/admin/events"
	};
  }

  rpc GetTicketClassesForEvent (AdminGetTicketClassesForEventRequest) returns (AdminGetTicketClassesForEventResponse) {
	  option (google.api.http) = {
		  get: "/api/admin/events/{EventId}/ticket-classes"
	  };
  }

  rpc AdminModifyEvent (AdminModifyEventRequest) returns (AdminModifyEventResponse) {
	  option (google.api.http) = {
	  post: "/api/admin/events/modify",
	  body: "*"
	  };
  }

  rpc AdminCancelEvent (AdminCancelEventRequest) returns (AdminCancelEventResponse) {
	  option (google.api.http) = {
	  post: "/api/admin/events/cancel",
	  body: "*"
	  };
  }

  rpc AdminCancelAllRecurringEvents (AdminCancelAllRecurringEventsRequest) returns (AdminCancelAllRecurringEventsResponse) {
	  option (google.api.http) = {
	  post: "/api/admin/events/cancel-all-recurring",
	  body: "*"
	  };
  }
}

enum CreateEventErrorType {
	CREATE_EVENT_NO_ERROR = 0; // No error occurred
	CREATE_EVENT_INVALID_REQUEST = 1; // The request was invalid
	CREATE_EVENT_UNAUTHORIZED = 2; // The user is not authorized to create events
	CREATE_EVENT_NULL_BODY = 3; // The request body was null
	CREATE_EVENT_FILE_EXISTS = 4; // Event Already Exists
	CREATE_EVENT_UNKNOWN = 5; // An unknown error occurred
}

enum CreateRecurringEventErrorType {
	CREATE_RECURRING_EVENT_NO_ERROR = 0; // No error occurred
	CREATE_RECURRING_EVENT_INVALID_REQUEST = 1; // The request was invalid
	CREATE_RECURRING_EVENT_UNAUTHORIZED = 2; // The user is not authorized to create recurring events
	CREATE_RECURRING_EVENT_NULL_BODY = 3; // The request body was null
	CREATE_RECURRING_EVENT_IVALID_RECURRENCE = 4; // An Invalidd recurrence rule was provided
	CREATE_RECURRING_EVENT_UNKNOWN = 5; // An unknown error occurred
	CREATE_RECURRING_EVENT_INVALID_HASH = 6; // The recurrence hash provided is invalid
}

enum GetEventErrorType {
	GET_EVENT_NO_ERROR = 0; // No error occurred
	GET_EVENT_NOT_FOUND = 1; // The requested event was not found
	GET_EVENT_UNAUTHORIZED = 2; // The user is not authorized to view the event
	GET_EVENT_UNKNOWN = 3; // An unknown error occurred
	GET_EVENT_INVALID_HASH = 4; // The recurrence hash provided is invalid
}

enum CancelEventErrorType {
	CANCEL_EVENT_NO_ERROR = 0; // No error occurred
	CANCEL_EVENT_NOT_FOUND = 1; // The event to cancel was not found
	CANCEL_EVENT_UNAUTHORIZED = 2; // The user is not authorized to cancel the event
	CANCEL_EVENT_UNKNOWN = 3; // An unknown error occurred
}

message EventError {
	string Message = 1;
	oneof ErrorTypeOneOf {
		CreateEventErrorType CreateEventError = 2; // Error type for event creation
		CreateRecurringEventErrorType CreateRecurringEventError = 3; // Error type for recurring event creation
		CancelEventErrorType CancelEventError = 4; // Error type for event cancellation
		GetEventErrorType GetEventError = 5;
	}
}

message CreateEventData {
	string Title = 1; // Title of the event
	string Description = 2; // Description of the event
	EventVenue Venue = 3; // Venue where the event will be held
	google.protobuf.Timestamp StartTimeUTC = 4; // Start time of the event in UTC
	google.protobuf.Timestamp EndTimeUTC = 5; // End time of the event in UTC
	repeated string Tags = 6; // Tags associated with the event
	repeated EventTicketClass TicketClasses = 7; // Ticket classes available for the event
	map<string, string> ExtraData = 8; // Additional metadata for the event
}

message AdminCreateEventRequest {
	CreateEventData Data = 1;
}

message AdminCreateEventResponse {
	EventError Error = 1; // Error information if creation failed
	EventRecord Event = 2; // The created event record if successful
}

message AdminCreateRecurringEventRequest {
	CreateEventData Data = 1;
	string RecurrenceHash = 2;
	EventRecurrenceRule RecurrenceRule = 9; // Recurrence rule defining how the event repeats
}

message AdminGetEventRequest {
  string EventId = 1;
}

message AdminGetEventResponse {
	EventError Error = 1; // Error information if retrieval failed
	EventRecord Event = 2;
}

message AdminGetEventsRequest {
	string RecurrenceHash = 1; // Optional hash to filter by recurring events
	bool IncludeCanceled = 2;
	Pagination Pagination = 10;
}

message AdminGetEventsResponse {
	EventError Error = 1; // Error information if retrieval failed
	repeated EventRecord Events = 2;
	Pagination Pagination = 3; // Pagination information for the list of events
}

message AdminGetTicketClassesForEventRequest {
	string EventId = 1;
}

message AdminGetTicketClassesForEventResponse {
	EventError Error = 1;
	repeated EventTicketClass TicketClasses = 2;
}

message AdminModifyEventRequest {
	string EventId = 1; // ID of the event to modify
	CreateEventData Data = 2; // New data to update the event with
}

message AdminModifyEventResponse {
	EventError Error = 1; // Error information if modification failed
}

message AdminModifyRecurringEventRequest {
	string EventId = 1; // ID of the recurring event to modify
	CreateEventData Data = 2; // New data to update the recurring event with
	EventRecurrenceRule RecurrenceRule = 9; // New recurrence rule for the recurring event
}

message AdminModifyRecurringEventResponse {
	EventError Error = 1; // Error information if modification failed
}

message AdminCancelEventRequest {
	string EventId = 1; // ID of the event to cancel
	string Reason = 2; // Reason for cancellation
}

message AdminCancelEventResponse {
	EventError Error = 1; // Error information if cancellation failed
}

message AdminCancelAllRecurringEventsRequest {
	string RecurrenceHash = 1; // Hash of the recurring event to cancel all occurrences
	string Reason = 2; // Reason for cancellation
}

message AdminCancelAllRecurringEventsResponse {
	EventError Error = 1; // Error information if cancellation failed
}