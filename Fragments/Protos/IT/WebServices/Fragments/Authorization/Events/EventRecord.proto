syntax = "proto3";

package IT.WebServices.Fragments.Authorization.Events;

import "google/protobuf/timestamp.proto";
import "Protos/IT/WebServices/Fragments/CommonTypes.proto";

//
// ENUMS
//

// Defines how a recurring event repeats over time
enum RecurrenceFrequency {
	REPEAT_NONE = 0;         // Not a recurring event
	REPEAT_DAILY = 1;        // Repeats every X days
	REPEAT_WEEKLY = 2;       // Repeats every X weeks
	REPEATE_MONTHLY = 3;     // Repeats every X months
	REPEAT_YEARLY = 4;       // Repeats every X years
}

// Used to indicate which oneof branch is active in EventRecord
enum EventRecordOneOfType {
	EVENT_ONE_OF_SINGLE = 0;      // The record is a one-time event
	EVENT_ONE_OF_RECURRING = 2;   // The record is a recurring event definition
}

enum EventVenueOneOfType {
	VENUE_ONE_OF_PHYSICAL = 0;    // The venue is a physical location
	VENUE_ONE_OF_VIRTUAL = 1;      // The venue is a virtual location (e.g., online)
}

//
// VENUE
//

// Represents a physical location where events are held
message PhysicalEventVenue {
	string Name = 1;                               // Name of the venue
	string Address = 2;                            // Physical address
	string City = 3;                               // City where the venue is located
	string StateOrProvince = 4;                    // State or province
	string PostalCode = 5;                          // Postal code
	string Country = 6;                             // Country
	string PhoneNumber = 7;                         // Contact phone number
	string EmailAddress = 8;                        // Contact email address
}

// Represents a virtual venue for online events
message VirtualEventVenue {                    // Unique identifier for the virtual venue
	string Name = 1;                               // Name of the virtual venue
	string Url = 2;                                // URL for accessing the virtual venue (e.g., video conference link)
	string AccessInstructions = 3;                 // Instructions for accessing the virtual venue
	string ContactEmailAddress = 4;                // Contact email address for support
}

// Represents a venue for events, can be physical or virtual
message EventVenue {
	string VenueId = 1;                            // Unique identifier for the venue
	EventVenueOneOfType OneOfType = 2;            // Indicates which branch is active
	oneof VenueOneOf {
		PhysicalEventVenue Physical = 3;           // Physical venue details
		VirtualEventVenue Virtual = 4;             // Virtual venue details
	}
}


//
// RECURRING RULE
//

// Describes how and when a recurring event should repeat
message EventRecurrenceRule {
	RecurrenceFrequency Frequency = 1;                // Frequency unit (e.g. daily, weekly, etc.)
	uint32 Interval = 2;                              // How often to repeat (every N units of Frequency)
	repeated WeekdayEnum ByWeekday = 3;               // Specific weekdays (if weekly recurrence)

	oneof EndCondition {
		uint32 Count = 4;                              // Total number of occurrences
		google.protobuf.Timestamp RepeatUntilUTC = 5;  // Stop repeating after this date
	}

	repeated google.protobuf.Timestamp ExcludeDatesUTC = 6; // Specific dates to skip (e.g., holidays)
}

//
// SINGLE EVENT (One-time Only)
//

// Public data for single (non-recurring) events
message SingleEventPublicRecord {
	string EventId = 1;                               // Unique identifier for the event
	string Title = 2;
	string Description = 3;
	string Location = 4;							// Location of the event (e.g., venue name)

	google.protobuf.Timestamp StartOnUTC = 5;         // When the event starts (UTC)
	google.protobuf.Timestamp EndOnUTC = 6;           // When the event ends (UTC)

	repeated string Tags = 7;                         // Optional tags for categorization
	repeated EventTicketClass TicketClasses = 8;      // Tickets available for this event

	bool IsCanceled = 9;                              // Whether the event was canceled
	EventVenue Venue = 10; // Venue where the recurring event takes place
	uint32 MaxTickets = 11; // Maximum number of tickets available for this event
	google.protobuf.Timestamp CanceledOnUTC = 20;
	google.protobuf.Timestamp CreatedOnUTC = 21;
	google.protobuf.Timestamp ModifiedOnUTC = 22;
}

// Internal data for single events (not exposed publicly)
message SingleEventPrivateRecord {
	string CreatedById = 1;
	string ModifiedById = 2;

	string ExternalSystemId = 3;                      // Optional system integration reference
	string InternalNotes = 4;                         // Private notes for staff/admins

	string CanceledById = 5;
	map<string, string> ExtraMetadata = 6; // Additional metadata for the event
	string CanceledForReason = 7; // Reason for cancellation, if applicable
}

//
// RECURRING EVENT (Definition Only)
//

// Public data for recurring event definitions
message RecurringEventPublicRecord {
	string EventId = 1;
	string Title = 2;
	string Description = 3;
	string Location = 4;
	uint32 MaxTickets = 5; // Maximum number of tickets available for each occurrence
	google.protobuf.Timestamp TemplateStartOnUTC = 6; // Example/template start time
	google.protobuf.Timestamp TemplateEndOnUTC = 7;  // Example/template end time

	repeated string Tags = 8;
	repeated EventTicketClass TicketClasses = 9;

	EventRecurrenceRule Recurrence = 10;
	
	string RecurrenceHash = 12;	// Hash all recurring events created together share for db indexing
	EventVenue Venue = 13; // Venue where the recurring event takes place
	bool IsCanceled = 11;
	google.protobuf.Timestamp CanceledOnUTC = 21;
	google.protobuf.Timestamp CreatedOnUTC = 22;
	google.protobuf.Timestamp ModifiedOnUTC = 23;
}

// Internal data for recurring event definitions
message RecurringEventPrivateRecord {
	string CreatedById = 1;
	string ModifiedById = 2;

	string ExternalSystemId = 3;
	string InternalNotes = 4;

	string CanceledById = 5;
	map<string, string> ExtraMetadata = 6; // Additional metadata for the recurring event
	string CanceledForReason = 7;
}

//
// COMBINED EVENT RECORD
//

// A unified event wrapper that can represent either a single event or a recurring definition.
// Stored together in one place, type determined by OneOfType + oneof branch.
message EventRecord {
	string EventId = 1;

	EventRecordOneOfType OneOfType = 2; // Indicates which branch is active

	// Public data, oneof-enforced
	oneof EventPublicRecordOneOf {
		SingleEventPublicRecord SinglePublic = 3;
		RecurringEventPublicRecord RecurringPublic = 4;
	}

	// Private data, oneof-enforced
	oneof EventPrivateRecordOneOf {
		SingleEventPrivateRecord SinglePrivate = 5;
		RecurringEventPrivateRecord RecurringPrivate = 6;
	}
}

message EventPublicRecord {
	string EventId = 1; // Unique identifier for the event
		EventRecordOneOfType OneOfType = 2; // Indicates which branch is active

	// Public data, oneof-enforced
	oneof EventPublicRecordOneOf {
		SingleEventPublicRecord SinglePublic = 3;
		RecurringEventPublicRecord RecurringPublic = 4;
	}
}
