syntax = "proto3";

package IT.WebServices.Fragments.Authorization.Events;
import "Protos/IT/WebServices/Fragments/Authorization/Events/EventTicketRecord.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

service EventTicketInterface {
	rpc CreateTicket (CreateTicketRequest) returns (CreateTicketResponse) {
		option (google.api.http) = {
			post: "/api/events/tickets",
			body: "*"
		};
	}

	rpc CreateTicketClass (CreateTicketClassRequest) returns (CreateTicketClassResponse) {
		option (google.api.http) = {
			post: "/api/events/ticket-classes",
			body: "*"
		};
	}

	rpc GetTicket (GetTicketRequest) returns (GetTicketResponse) {
		option (google.api.http) = {
			get: "/api/events/{EventId}/tickets/{TicketId}"
		};
	}

	rpc GetTicketsForEvent (GetTicketsForEventRequest) returns (GetTicketsForEventResponse) {
		option (google.api.http) = {
			get: "/api/events/{EventId}/tickets"
		};
	}

	rpc GetTicketClass (GetTicketClassRequest) returns (GetTicketClassResponse) {
		option (google.api.http) = {
			get: "/api/events/ticket-classes/{TicketClassId}"
		};
	}

	rpc GetTicketClasses (GetTicketClassesRequest) returns (GetTicketClassesResponse) {
		option (google.api.http) = {
			get: "/api/events/ticket-classes"
		};
	}
}

enum TicketsCreateErrorType {
	CREATE_TICKET_NO_ERROR = 0;
	CREATE_TICKET_INVALID_REQUEST = 1;
	CREATE_TICKET_UNAUTHORIZED = 2;
	CREATE_TICKET_NULL_BODY = 3;
	CREATE_TICKET_UNKNOWN = 4;
}

message CreateTicketRequest {
	string TicketClassId = 1;
	string Title = 2;
	string EventId = 3;
}

message CreateTicketResponse {
	TicketsCreateErrorType Error = 1;
	string Message = 2;
}

message CreateTicketClassRequest {
	EventTicketClassType Type = 1;
	string Name = 2;
	uint32 AmountAvailible = 3;
	uint32 MaxTicketsPerUser = 4;
	bool IsTransferrable = 5;
	google.protobuf.Timestamp SaleStartOnUTC = 21;
	google.protobuf.Timestamp SaleEndOnUTC = 22;
}

message CreateTicketClassResponse {
	TicketsCreateErrorType Error = 1;
	string Message = 2;
}

message GetTicketRequest {
	string TicketId = 1;
	string EventId = 2;
}

message GetTicketResponse {
	EventTicketRecord Record = 1;
}

message GetTicketsForEventRequest {
	string EventId = 1;
}

message GetTicketsForEventResponse {
	repeated EventTicketRecord Records = 1;
}

message GetTicketClassRequest {
	string TicketClassId = 1;
}

message GetTicketClassResponse {
	EventTicketClass TicketClass = 1;
}

message GetTicketClassesRequest {}

message GetTicketClassesResponse {
	repeated EventTicketClass TicketClasses = 1;
}