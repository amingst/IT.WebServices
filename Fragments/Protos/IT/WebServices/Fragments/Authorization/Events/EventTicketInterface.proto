syntax = "proto3";

package IT.WebServices.Fragments.Authorization.Events;
import "Protos/IT/WebServices/Fragments/Authorization/Events/EventTicketRecord.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

service EventTicketInterface {
	// TODO: Rename to AdminCreateTicket
	rpc CreateTicket (CreateTicketRequest) returns (CreateTicketResponse) {
		option (google.api.http) = {
			post: "/api/events/tickets",
			body: "*"
		};
	}

	rpc GetTicket (GetTicketRequest) returns (GetTicketResponse) {
		option (google.api.http) = {
			get: "/api/events/{EventId}/tickets/{TicketId}"
		};
	}

	rpc AdminGetTicket (AdminGetTicketRequest) returns (AdminGetTicketResponse) {
		option (google.api.http) = {
			get: "/api/admin/events/{EventId}/tickets/{TicketId}"
		};
	}

	// TODO: Rename to AdminGetTicketsForEvent
	rpc GetTicketsForEvent (GetTicketsForEventRequest) returns (GetTicketsForEventResponse) {
		option (google.api.http) = {
			get: "/api/events/{EventId}/tickets"
		};
	}

	rpc CancelOwnTicket (CancelOwnTicketRequest) returns (CancelOwnTicketResponse) {
		option (google.api.http) = {
			post: "/api/events/{EventId}/tickets/{TicketId}/cancel",
			body: "*"
		};
	}
}

enum TicketsCreateErrorType {
	CREATE_TICKET_NO_ERROR = 0;
	CREATE_TICKET_INVALID_REQUEST = 1;
	CREATE_TICKET_UNAUTHORIZED = 2;
	CREATE_TICKET_NULL_BODY = 3;
	CREATE_TICKET_UNKNOWN = 4;
}

enum CancelTicketErrorType {
	CANCEL_TICKET_NO_ERROR = 0;
	CANCEL_TICKET_UNAUTHORIZED = 1;
	CANCEL_TICKET_EVENT_NOT_FOUND = 2;
	CANCEL_TICKET_TICKET_NOT_FOUND = 3;
}

message TicketError {
	string Message = 1;
	oneof TicketErrorType {
		TicketsCreateErrorType CreateTicketError = 2;
		CancelTicketErrorType CancelTicketError = 3;
	}
}

message CreateTicketRequest {
	string TicketClassId = 1;
	string Title = 2;
	string EventId = 3;
}

message CreateTicketResponse {
	TicketsCreateErrorType Error = 1;
	string Message = 2;
}

message GetTicketRequest {
	string TicketId = 1;
	string EventId = 2;
}

message GetTicketResponse {
	EventTicketRecord Record = 1;
}

message AdminGetTicketRequest {
	string EventId = 1;
	string TicketId = 2;
}

message AdminGetTicketResponse {
	EventTicketRecord Record = 1;
}

message GetTicketsForEventRequest {
	string EventId = 1;
}

message GetTicketsForEventResponse {
	repeated EventTicketRecord Records = 1;
}

message CancelOwnTicketRequest {
	string EventId = 1;
	string TicketId = 2;
	string Reason = 3;
}

message CancelOwnTicketResponse {
	TicketError Error = 1;
}