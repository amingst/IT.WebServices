syntax = "proto3";

package IT.WebServices.Fragments.Authorization.Events;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Events/EventRecord.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Events/EventTicketRecord.proto";
import "Protos/IT/WebServices/Fragments/Authorization/Events/EventError.proto";
import "Protos/IT/WebServices/Fragments/CommonTypes.proto";

service AdminEventInterface {
	rpc AdminCreateEvent (AdminCreateEventRequest) returns (AdminCreateEventResponse) {
	option (google.api.http) = {
	  post: "/api/admin/events/create",
	  body: "*"
	};
  }
  rpc AdminCreateRecurringEvent (AdminCreateRecurringEventRequest) returns (AdminCreateEventResponse) {
	option (google.api.http) = {
	  post: "/api/admin/events/create-recurring",
	  body: "*"
	};
  }
  rpc AdminGetEvent (AdminGetEventRequest) returns (AdminGetEventResponse) {
	option (google.api.http) = {
	  get: "/api/admin/events/{EventId}"
	};
  }
  rpc AdminGetEvents (AdminGetEventsRequest) returns (AdminGetEventsResponse) {
	option (google.api.http) = {
	  get: "/api/admin/events"
	};
  }
  rpc AdminModifyEvent (AdminModifyEventRequest) returns (AdminModifyEventResponse) {
	  option (google.api.http) = {
	  post: "/api/admin/events/modify",
	  body: "*"
	  };
  }

  rpc AdminCancelEvent (AdminCancelEventRequest) returns (AdminCancelEventResponse) {
	  option (google.api.http) = {
	  post: "/api/admin/events/cancel",
	  body: "*"
	  };
  }

  rpc AdminCancelAllRecurringEvents (AdminCancelAllRecurringEventsRequest) returns (AdminCancelAllRecurringEventsResponse) {
	  option (google.api.http) = {
	  post: "/api/admin/events/cancel-all-recurring",
	  body: "*"
	  };
  }

  rpc AdminGetTicket (AdminGetTicketRequest) returns (AdminGetTicketResponse) {
		option (google.api.http) = {
			get: "/api/admin/events/{EventId}/tickets/{TicketId}"
		};
	}

	rpc AdminGetTicketsForEvent (AdminGetTicketsForEventRequest) returns (AdminGetTicketsForEventResponse) {
		option (google.api.http) = {
			get: "/api/admin/events/{EventId}/tickets"
		};
	}

	rpc AdminCancelOtherTicket (AdminCancelOtherTicketRequest) returns (AdminCancelOtherTicketResponse) {
		option (google.api.http) = {
			post: "/api/admin/events/{EventId}/tickets/{TicketId}/cancel",
			body: "*"
		};
	}

	rpc AdminReserveEventTicketForUser (AdminReserveEventTicketForUserRequest) returns (AdminReserveEventTicketForUserResponse) {
		option (google.api.http) = {
			post: "/api/admin/events/{EventId}/tickets/reserve",
			body: "*"
		};
	}
}

message CreateEventData {
	string Title = 1; // Title of the event
	string Description = 2; // Description of the event
	EventVenue Venue = 3; // Venue where the event will be held
	google.protobuf.Timestamp StartTimeUTC = 4; // Start time of the event in UTC
	google.protobuf.Timestamp EndTimeUTC = 5; // End time of the event in UTC
	repeated string Tags = 6; // Tags associated with the event
	repeated EventTicketClass TicketClasses = 7; // Ticket classes available for the event
	map<string, string> ExtraData = 8; // Additional metadata for the event
}

message AdminCreateEventRequest {
	CreateEventData Data = 1;
}

message AdminCreateEventResponse {
	EventError Error = 1; // Error information if creation failed
	EventRecord Event = 2; // The created event record if successful
}

message AdminCreateRecurringEventRequest {
	CreateEventData Data = 1;
	string RecurrenceHash = 2;
	EventRecurrenceRule RecurrenceRule = 9; // Recurrence rule defining how the event repeats
}

message AdminGetEventRequest {
  string EventId = 1;
}

message AdminGetEventResponse {
	EventError Error = 1; // Error information if retrieval failed
	EventRecord Event = 2;
}

message AdminGetEventsRequest {
	string RecurrenceHash = 1; // Optional hash to filter by recurring events
	bool IncludeCanceled = 2;
	Pagination Pagination = 10;
}

message AdminGetEventsResponse {
	EventError Error = 1; // Error information if retrieval failed
	repeated EventRecord Events = 2;
	Pagination Pagination = 3; // Pagination information for the list of events
}

message AdminModifyEventRequest {
	string EventId = 1; // ID of the event to modify
	CreateEventData Data = 2; // New data to update the event with
}

message AdminModifyEventResponse {
	EventError Error = 1; // Error information if modification failed
}

message AdminModifyRecurringEventRequest {
	string EventId = 1; // ID of the recurring event to modify
	CreateEventData Data = 2; // New data to update the recurring event with
	EventRecurrenceRule RecurrenceRule = 9; // New recurrence rule for the recurring event
}

message AdminModifyRecurringEventResponse {
	EventError Error = 1; // Error information if modification failed
}

message AdminCancelEventRequest {
	string EventId = 1; // ID of the event to cancel
	string Reason = 2; // Reason for cancellation
}

message AdminCancelEventResponse {
	EventError Error = 1; // Error information if cancellation failed
}

message AdminCancelAllRecurringEventsRequest {
	string RecurrenceHash = 1; // Hash of the recurring event to cancel all occurrences
	string Reason = 2; // Reason for cancellation
}

message AdminCancelAllRecurringEventsResponse {
	EventError Error = 1; // Error information if cancellation failed
}

message AdminGetTicketRequest {
	string EventId = 1;
	string TicketId = 2;
}

message AdminGetTicketResponse {
	EventTicketRecord Record = 1;
}

message AdminGetTicketsForEventRequest {
	string EventId = 1;
}

message AdminGetTicketsForEventResponse {
	repeated EventTicketRecord Records = 1;
}

message AdminCancelOtherTicketRequest {
	string EventId = 1;
	string TicketId = 2;
	string UserId = 3;
	string Reason = 4;
}

message AdminCancelOtherTicketResponse {
	TicketError Error = 1;
}

message AdminReserveEventTicketForUserRequest {
	string EventId = 1; // ID of the event for which to reserve tickets
	string UserId = 2; // ID of the user for whom to reserve tickets
	string TicketClassId = 3; // ID of the ticket class to reserve
	int32 Quantity = 4; // Number of tickets to reserve
}

message AdminReserveEventTicketForUserResponse {
	TicketError Error = 1; // Error information if reservation failed
	repeated EventTicketRecord Tickets = 2; // List of reserved tickets if successful
}